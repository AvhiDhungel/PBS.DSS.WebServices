@page "/ServiceOrderStatus"
@page "/ServiceOrderStatus/{SerialNumber}/{WorkItemRef}/{Requestor}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudStack AlignItems="AlignItems.Stretch">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@Resources.ServiceOrder</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack>
                        <MudGrid Spacing="1">
                            <MudItem md="2" xs="3">
                                <MudText Typo="Typo.h6">#</MudText>
                            </MudItem>
                            <MudItem md="10" xs="9">
                                <MudText Class="@MudClasses.MudCardDetail.GetClass()">@ServiceOrder.SONumber</MudText>
                            </MudItem>
                            <MudItem md="2" xs="3">
                                <MudText Typo="Typo.h6">Vehicle</MudText>
                            </MudItem>
                            <MudItem md="10" xs="9">
                                <MudText Class="@MudClasses.MudCardDetail.GetClass()">@ServiceOrder.Vehicle.Description</MudText>
                            </MudItem>
                            <MudItem md="2" xs="3">
                                <MudText Typo="Typo.h6">Advisor</MudText>
                            </MudItem>
                            <MudItem md="10" xs="9">
                                <MudText Class="@MudClasses.MudCardDetail.GetClass()">@ServiceOrder.AdvisorName</MudText>
                            </MudItem>
                        </MudGrid>

                        <MudGrid Class="mt-1">
                            @if (ServiceOrder.RequiresApproval())
                            {
                                <MudItem md="3" xs="6">
                                    <MudButton Variant="Variant.Outlined"
                                               Class="@MudClasses.MudButtonDense.GetClass()"
                                               StartIcon="@Icons.Material.Outlined.Recommend"
                                               OnClick="ViewRecommendations">
                                        @Resources.ViewYourRecommendations
                                    </MudButton>
                                </MudItem>
                            }
                            else
                            {
                                @if (ServiceOrder.HasInspection())
                                {
                                    <MudItem md="3" xs="6">
                                        <MudButton Variant="Variant.Outlined"
                                                   Class="@MudClasses.MudButtonDense.GetClass()"
                                                   StartIcon="@Icons.Material.Outlined.Checklist"
                                                   OnClick="ViewInspection">
                                            @Resources.Inspection
                                        </MudButton>
                                    </MudItem>
                                }
                                <MudItem md="3" xs="6">
                                    <MudButton Variant="Variant.Outlined"
                                               Class="@MudClasses.MudButtonDense.GetClass()"
                                               StartIcon="@(ServiceOrder.RequiresInvoiceSignature() ? Icons.Material.Outlined.Create : Icons.Material.Outlined.FileOpen)"
                                               OnClick="ViewCustomerCopy">
                                        @(ServiceOrder.RequiresInvoiceSignature() ? "Sign Invoice" : "Invoice")
                                    </MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudTimeline Class="pb-5"
                             TimelineOrientation="TimelineOrientation.Horizontal"
                             TimelinePosition="@(IsMobile ? TimelinePosition.Alternate : TimelinePosition.Top)">
                    @foreach (ServiceOrderTimeline e in Enum.GetValues(typeof(ServiceOrderTimeline)))
                    {
                        <MudTimelineItem Size="Size.Medium"
                                         Color="Color.Success"
                                         Variant="Variant.Filled"
                                         HideDot="@(ServiceOrder.Timeline != e)">
                            <ItemDot>
                                <MudIcon Icon="@Icons.Material.Outlined.Check" />
                            </ItemDot>
                            <ItemContent>
                                <MudText Align="Align.Center" Typo="Typo.body2">@(e.ToLocalizedString())</MudText>
                            </ItemContent>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudCard>
            <MudCard>
                <MudCardHeader>
                    <MudStack Row="true" Style="width:100%">
                        <MudText Typo="Typo.h5">@Resources.Services</MudText>
                        <MudSpacer />
                        <MudToggleIconButton Class="@MudClasses.ToggleButton.GetClass()"
                                             Variant="Variant.Text"
                                             ToggledIcon="@Icons.Material.Filled.KeyboardArrowUp"
                                             Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                             Size="Size.Large"
                                             ToggledSize="Size.Large"
                                             Toggled="IsServicesExpanded"
                                             ToggledChanged="ToggleServices" />
                    </MudStack>
                </MudCardHeader>
                <MudCollapse Expanded="@IsServicesExpanded">
                    <MudCardContent>
                        <MudStack>
                            @foreach (var req in ServiceOrder.ApprovedRequests)
                            {
                                <MudText Class="@MudClasses.MudCardDetail.GetClass()">@req.Description</MudText>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCollapse>
            </MudCard>
        </MudStack>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;
    [Parameter]
    public string Requestor { get; set; } = string.Empty;

    private ServiceOrder ServiceOrder { get; set; } = new();

    private bool IsServicesExpanded { get; set; } = true;
    private bool IsMobile { get; set; } = true;

    private async Task Initialize()
    {
        IsMobile = await InterOpService.IsMobile();
        SharedStateService.SharedState.EncodedRequestor = Requestor;

        var busyDialog = await DialogService.ShowBusyDialog();
        var args = new ServiceOrderFetchArgs() { SerialNumber = SerialNumber, ServiceOrderRef = ServiceOrder.Id, ViewedFrom = DSSAccessTypes.ServiceOrderStatus };

        var resp = await ControllerAPIService.FetchServiceOrder(args);

        busyDialog.Close();

        if (resp.HasError || resp.ResponseObject == null)
        {
            SharedStateService.SetInvalidServiceOrderError();
            return;
        }

        ServiceOrder = resp.ResponseObject;
        ServiceOrder.SerialNumber = SerialNumber;
        ServiceOrder.AccessType = DSSAccessTypes.ServiceOrderStatus;
        SharedStateService.SetBanner(ServiceOrder.ShopBanner);
    }

    private bool ValidateParams()
    {
        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateServiceOrderRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        ServiceOrder.Id = parsedWorkItemRef;

        return true;
    }

    private void ToggleServices() => IsServicesExpanded = !IsServicesExpanded;

    private void ViewRecommendations()
    {
        NavigationManager.NavigateTo($"/WaitingForApproval/{SerialNumber}/{ServiceOrder.Id}/{Requestor}");
    }

    private async Task ViewInspection()
    {
        if (!SharedStateService.HasModel())
            await DialogService.PerformBusy(SharedStateService.SaveModelToSession(ServiceOrder));

        await InterOpService.OpenLinkInNewTab($"/Document/{DocumentTypes.Inspection.ToString()}");
    }

    private async Task ViewCustomerCopy()
    {
        var signInvoice = ServiceOrder.RequiresInvoiceSignature();

        if (!SharedStateService.HasModel())
        {
            if (signInvoice)
                SharedStateService.SetSignatureRequired(DocumentTypes.CustomerCopy, SignatureActionTypes.SignInvoice);

            await DialogService.PerformBusy(SharedStateService.SaveModelToSession(ServiceOrder));
        }

        if (signInvoice)
            NavigationManager.NavigateTo($"/Document/{DocumentTypes.CustomerCopy.ToString()}", forceLoad: true);
        else
            await InterOpService.OpenLinkInNewTab($"/Document/{DocumentTypes.CustomerCopy.ToString()}");
    }
}
