@page "/AppointmentStatus"
@page "/AppointmentStatus/{SerialNumber}/{WorkItemRef}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudStack AlignItems="AlignItems.Center" Class="mb-20">
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true" Wrap="Wrap.Wrap" Class="mb-4">
                @if (Appointment.SelfCheckInEnabled)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Outlined.Person"
                               OnClick="CheckIn">
                        @Resources.CheckIn
                    </MudButton>
                }

                @if (Appointment.CanReschedule)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Outlined.EditCalendar"
                               OnClick="ReSchedule">
                        @Resources.Reschedule
                    </MudButton>
                }

                @if (Appointment.CanCancel)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Outlined.Cancel"
                               OnClick="CancelAppointment">
                        @Resources.CancelAppointment
                    </MudButton>
                }

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Outlined.CalendarToday"
                           OnClick="AddToCalendar">
                    @Resources.AddToCalendar
                </MudButton>
            </MudStack>

            <MudGrid Justify="Justify.Center">
                <MudItem lg="5" md="6" xs="12">
                    <MudPaper Elevation="4" Class="paper-card-fit">
                        <MudStack AlignItems="AlignItems.Stretch" Spacing="1">
                            <MudText Typo="Typo.h6" Align="Align.Center">@Resources.AppointmentDetails</MudText>
                            <MudDivider />
                            <MudSpacer />
                            <MudStack Row="true">
                                <MudText>@Resources.Appt #:</MudText>
                                <MudSpacer />
                                <MudText>@Appointment.AppointmentNumber</MudText>
                            </MudStack>
                            <MudStack Row="true">
                                <MudText>@Resources.Date:</MudText>
                                <MudSpacer />
                                <MudText>@Appointment.AppointmentTime.LocalDateTime.ToShortDateString()</MudText>
                            </MudStack>
                            <MudStack Row="true">
                                <MudText>@Resources.Time:</MudText>
                                <MudSpacer />
                                <MudText>@Appointment.AppointmentTime.LocalDateTime.ToShortTimeString()</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem lg="5" md="6" xs="12">
                    <MudPaper Elevation="4" Class="paper-card-fit">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6">@Resources.VehicleDetails</MudText>
                            <MudDivider />
                            <MudSpacer />
                            <MudText>@Appointment.Vehicle.Description</MudText>
                            <MudText>@Appointment.Vehicle.VIN</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem lg="10" md="12" xs="12">
                    <MudPaper Elevation="4" Class="paper-card-wrap">
                        <MudStack Spacing="1" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6">@Resources.AdditionalComments</MudText>
                            <MudDivider />
                            <MudSpacer />
                            <MudText>@Appointment.DropOffInstructions</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.Center" Class="mb-4">
                <MudItem lg="10" md="12" xs="12">
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4">@Resources.Services</MudText>
                    <MudDivider />
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.Center">
                @foreach (var req in Appointment.Requests)
                {
                    <MudItem lg="@((req == Appointment.Requests.Last()) ? 10: 5)"
                             md="@((req == Appointment.Requests.Last()) ? 8: 4)"
                             xs="12">
                        <MudPaper Elevation="4" Class="paper-card-wrap">
                            <MudStack Spacing="1">
                                <MudText>@req.Description</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                }

            </MudGrid>
        </MudStack>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;

    private Appointment Appointment { get; set; } = new();

    private async Task Initialize()
    {
        //Debug Code
        Appointment = Appointment.GenerateDummy();
        SerialNumber = "9999.QA";
        return;

        var busyDialog = DialogService.Show<MudBusyDialog>("");
        var args = new AppointmentFetchArgs() { SerialNumber = SerialNumber, AppointmentRef = Appointment.Id };

        var resp = await ControllerAPIService.FetchAppointment(args);

        busyDialog.Close();

        if (resp.HasError)
        {
            SharedStateService.SetInvalidAppointmentError();
            return;
        }

        Appointment = resp.ResponseObject ?? Appointment;
        SharedStateService.SetBanner(Appointment.ShopBanner);
    }

    private bool ValidateParams()
    {
        return true; //Debug code

        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateAppointmentRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        Appointment.Id = parsedWorkItemRef;

        return true;
    }

    private void ViewRecommendations()
    {
        NavigationManager.NavigateTo($"/WaitingForApproval/{SerialNumber}/{WorkItemRef}");
    }

    private async Task CheckIn()
    {
        if (!await PromptOdometer()) return;
    }

    private async Task<bool> PromptOdometer()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = false;
        options.BackdropClick = false;
        options.Position = DialogPosition.Center;
        options.MaxWidth = MaxWidth.Medium;

        var parameters = new DialogParameters<OdomoterEntryDialog>();
        parameters.Add(x => x.Odometer, Appointment.Odometer);

        var dialog = await DialogService.ShowAsync<OdomoterEntryDialog>(Resources.EnterOdometer, parameters, options);
        var result = await dialog.Result;
        var odom = result.GetValue<int>();

        if (odom == 0) return false;

        Appointment.Odometer = odom;
        return true;
    }

    private void ReSchedule()
    {
        NavigationManager.NavigateTo($"{Utilities.GetWebAppointmentsURL()}/{SerialNumber}/{Appointment.Id}/Reschedule");
    }

    private void CancelAppointment()
    {

    }

    private async Task AddToCalendar()
    {
        var args = new Helpers.ICSDownloadArgs();

        args.StartDate = Appointment.AppointmentTime.LocalDateTime;
        args.EndDate = Appointment.PickupDate.LocalDateTime;
        args.Summary = Appointment.Vehicle.Description;
        args.Description = string.Join(" ", Appointment.Requests.Select(x => x.Description));
        args.Reference = Appointment.VehicleRef.ToString();

        await InterOpService.DownloadICS(args);
    }

}
