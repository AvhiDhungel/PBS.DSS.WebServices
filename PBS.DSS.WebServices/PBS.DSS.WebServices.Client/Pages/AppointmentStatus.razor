@page "/AppointmentStatus"
@page "/AppointmentStatus/{SerialNumber}/{WorkItemRef}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudStack AlignItems="AlignItems.Center">
            <MudText>Appt # @Appointment.AppointmentNumber</MudText>

            <MudText Typo="Typo.h5">Appointment Details</MudText>
            <MudDivider Style="width:30%" />
            <MudStack>
                <MudStack Row="true">
                    <MudText>Date:</MudText>
                    <MudSpacer />
                    <MudText>@Appointment.AppointmentTime.LocalDateTime.ToShortDateString()</MudText>
                </MudStack>
                <MudStack Row="true">
                    <MudText>Time:</MudText>
                    <MudSpacer />
                    <MudText>@Appointment.AppointmentTime.LocalDateTime.ToShortTimeString()</MudText>
                </MudStack>
            </MudStack>

            <MudText Typo="Typo.h5" Class="mt-4">Vehicle Details</MudText>
            <MudDivider Style="width:30%" />
            <MudText Typo="Typo.h6">@Appointment.Vehicle.Description</MudText>
            <MudText>@Appointment.Vehicle.VIN</MudText>

            <MudText Typo="Typo.h5" Class="mt-4">Services</MudText>
            <MudDivider Style="width:30%" />
            @foreach (var approved in Appointment.Requests)
            {
                <MudText>@approved.Description</MudText>
            }

            <MudText Typo="Typo.h5" Class="mt-4">Additional Comments</MudText>
            <MudDivider Style="width:30%" />
            <MudText>@Appointment.AdditionalComments</MudText>

            <MudStack Class="mt-10" Row="true">
                @if (Appointment.CheckInAvailable)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Tertiary"
                               Class="pt-2 pb-2"
                               OnClick="CheckIn">
                        Check In
                    </MudButton>
                    <MudSpacer />
                }

                @if (Appointment.CanReschedule)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Tertiary"
                               OnClick="ReSchedule">
                        Re-schedule
                    </MudButton>
                    <MudSpacer />
                }

                @if (Appointment.CanCancel)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Tertiary"
                               OnClick="CancelAppointment">
                        Cancel Appointment
                    </MudButton>
                    <MudSpacer />
                }

                <MudButton Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           OnClick="AddToCalendar">
                    Add to Calendar
                </MudButton>
            </MudStack>

        </MudStack>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;

    private Appointment Appointment { get; set; } = new();

    private async Task Initialize()
    {
        //Debug Code
        Appointment = Appointment.GenerateDummy();
        SerialNumber = "9999.QA";
        return;

        var busyDialog = DialogService.Show<MudBusyDialog>("");
        var args = new AppointmentFetchArgs() { SerialNumber = SerialNumber, AppointmentRef = Appointment.Id };
        var resp = await httpClient.PostAsJsonAsync<AppointmentFetchArgs>("/api/Appointment/FetchAppointment", args) ?? new();

        busyDialog.Close();

        if (!resp.IsSuccessStatusCode)
        {
            SharedStateService.SetInvalidAppointmentError();
            return;
        }

        Appointment = await resp.Content.ReadFromJsonAsync<Appointment>() ?? new();

        if (!Appointment.IsValid())
        {
            SharedStateService.SetInvalidAppointmentError();
            return;
        }

        SharedStateService.SetBanner(Appointment.ShopBanner);
    }

    private bool ValidateParams()
    {
        return true; //Debug code

        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateAppointmentRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        Appointment.Id = parsedWorkItemRef;

        return true;
    }

    private void ViewRecommendations()
    {
        NavigationManager.NavigateTo($"/WaitingForApproval/{SerialNumber}/{WorkItemRef}");
    }

    private void CheckIn()
    {

    }

    private void ReSchedule()
    {

    }

    private void CancelAppointment()
    {

    }

    private async Task AddToCalendar()
    {
        var args = new Helpers.ICSDownloadArgs();

        args.StartDate = Appointment.AppointmentTime.LocalDateTime;
        args.EndDate = Appointment.PickupDate.LocalDateTime;
        args.Summary = Appointment.Vehicle.Description;
        args.Description = string.Join(" ", Appointment.Requests.Select(x => x.Description));
        args.Reference = Appointment.VehicleRef.ToString();

        await InterOpService.DownloadICS(args);
    }

}
