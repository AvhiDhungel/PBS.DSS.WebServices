@page "/AppointmentStatus"
@page "/AppointmentStatus/{SerialNumber}/{WorkItemRef}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudGrid Class="mb-20">
            <MudItem xs="12" md="8" lg="8">
                <MudStack AlignItems="AlignItems.Stretch">
                    @if (Appointment.DropOffInstructions.HasValue())
                    {
                        <MudCard>
                            <MudCardHeader>
                                <MudText Typo="Typo.h5">@Resources.AdditionalComments</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Class="@MudClasses.MudCardDetail.GetClass()">@Appointment.DropOffInstructions</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                    <MudCard>
                        <MudCardHeader>
                            <MudStack Row="true" Style="width:100%">
                                <MudText Typo="Typo.h5">@Resources.Services</MudText>
                                <MudSpacer />
                                <MudToggleIconButton Class="@MudClasses.ToggleButton.GetClass()"
                                                     Variant="Variant.Text"
                                                     ToggledIcon="@Icons.Material.Filled.KeyboardArrowUp"
                                                     Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                     Size="Size.Large"
                                                     ToggledSize="Size.Large"
                                                     Toggled="IsServicesExpanded"
                                                     ToggledChanged="ToggleServices" />
                            </MudStack>
                        </MudCardHeader>
                        <MudCollapse Expanded="@IsServicesExpanded">
                            <MudCardContent>
                                <MudStack>
                                    @foreach (var req in Appointment.Requests)
                                    {
                                        <MudText Class="@MudClasses.MudCardDetail.GetClass()">@req.Description</MudText>
                                    }
                                </MudStack>
                            </MudCardContent>
                        </MudCollapse>
                    </MudCard>
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudPaper Elevation="0" Class="@MudClasses.MudPaperSticky.GetClass()">
                    <MudCard>
                        <MudCardContent>
                            <MudStack>
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.h6">@(Resources.Appt)# @Appointment.AppointmentNumber</MudText>
                                    <MudText Typo="Typo.h6">@Appointment.AppointmentTime.LocalDateTime.ToShortDateString()</MudText>
                                    <MudText Typo="Typo.h6">@Appointment.AppointmentTime.LocalDateTime.ToShortTimeString()</MudText>
                                </MudStack>

                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.h6">@Appointment.Vehicle.Description</MudText>
                                    <MudText Typo="Typo.h6">@Appointment.Vehicle.VIN</MudText>
                                </MudStack>

                                <MudGrid Spacin="3" Justify="Justify.FlexStart" Style="align-items: stretch;">
                                    @if (Appointment.CanCheckIn())
                                    {
                                        <MudItem xs="6">
                                            <MudButton Variant="Variant.Outlined"
                                                       Class="@MudClasses.MudButton.GetClass()"
                                                       StartIcon="@Icons.Material.Outlined.CheckCircleOutline"
                                                       OnClick="CheckIn">
                                                @Resources.CheckIn.ToUpper()
                                            </MudButton>
                                        </MudItem>
                                    }
                                    @if (Appointment.CanReschedule())
                                    {
                                        <MudItem xs="6">
                                            <MudButton Variant="Variant.Outlined"
                                                       Class="@MudClasses.MudButtonDense.GetClass()"
                                                       StartIcon="@Icons.Material.Outlined.EditCalendar"
                                                       OnClick="ReSchedule">
                                                @Resources.Reschedule.ToUpper()
                                            </MudButton>
                                        </MudItem>
                                    }
                                    @if (Appointment.CanCancel())
                                    {
                                        <MudItem xs="6">
                                            <MudButton Variant="Variant.Outlined"
                                                       Class="@MudClasses.MudButtonDense.GetClass()"
                                                       StartIcon="@Icons.Material.Outlined.Cancel"
                                                       OnClick="CancelAppointment">
                                                @Resources.CancelAppointment.ToUpper()
                                            </MudButton>
                                        </MudItem>
                                    }
                                    <MudItem xs="6">
                                        <MudButton Variant="Variant.Outlined"
                                                   Class="@MudClasses.MudButtonDense.GetClass()"
                                                   StartIcon="@Icons.Material.Outlined.CalendarToday"
                                                   OnClick="AddToCalendar">
                                            @Resources.AddToCalendar.ToUpper()
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;

    private Appointment Appointment { get; set; } = new();

    private bool IsServicesExpanded { get; set; } = true;

    private async Task Initialize()
    {
        SharedStateService.SharedState.SerialNumber = SerialNumber;

        var busyDialog = await DialogService.ShowBusyDialog();
        var args = new AppointmentFetchArgs() { SerialNumber = SerialNumber, AppointmentRef = Appointment.Id };

        var resp = await ControllerAPIService.FetchAppointment(args);

        busyDialog.Close();

        if (resp.HasError || resp.ResponseObject == null)
        {
            SharedStateService.SetInvalidAppointmentError();
            return;
        }

        Appointment = resp.ResponseObject;
        Appointment.SerialNumber = SerialNumber;
        SharedStateService.SetBanner(Appointment.ShopBanner);
    }

    private bool ValidateParams()
    {
        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateAppointmentRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        Appointment.Id = parsedWorkItemRef;

        return true;
    }

    private void ToggleServices() => IsServicesExpanded = !IsServicesExpanded;

    private void ViewRecommendations()
    {
        NavigationManager.NavigateTo($"/WaitingForApproval/{SerialNumber}/{Appointment.Id}");
    }

    private async Task CheckIn()
    {
        if (!await PromptOdometer()) return;

        if (!SharedStateService.HasModel())
        {
            SharedStateService.SetSignatureRequired(DocumentTypes.HardCopy, SignatureActionTypes.AppointmentCheckIn);
            await DialogService.PerformBusy(SharedStateService.SaveModelToSession(Appointment));
        }

        NavigationManager.NavigateTo($"/Document/{DocumentTypes.HardCopy.ToString()}", forceLoad: true);
    }

    private async Task<bool> PromptOdometer()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = false;
        options.BackdropClick = false;
        options.Position = DialogPosition.Center;
        options.MaxWidth = MaxWidth.ExtraSmall;

        var parameters = new DialogParameters<OdomoterEntryDialog>();
        parameters.Add(x => x.Odometer, Appointment.Odometer);

        var dialog = await DialogService.ShowAsync<OdomoterEntryDialog>(Resources.EnterOdometer, parameters, options);
        var result = await dialog.Result;
        var odom = result.GetValue<int>();

        if (odom == 0) return false;

        Appointment.Odometer = odom;
        return true;
    }

    private void ReSchedule()
    {
        NavigationManager.NavigateTo($"{Utilities.GetWebAppointmentsURL()}/{SerialNumber}/{Appointment.Id}/Reschedule");
    }

    private async Task CancelAppointment()
    {
        var resp = await DialogService.PerformBusyResult(ControllerAPIService.Post(Appointment, "Appointment", "CancelAppointment"), "Cancelling Appointment");

        if (resp == null || !resp.IsSuccessStatusCode)
            SnackbarService.Add("We were unable to cancel your Appointment online.", Severity.Error);
        else
        {
            Appointment.Status = AppointmentStatuses.Deleted;
            SnackbarService.Add("Your Appointment has been successfully cancelled.", Severity.Success);
        }
    }

    private async Task AddToCalendar()
    {
        var args = new ICSDownloadArgs();

        args.StartDate = Appointment.AppointmentTime.LocalDateTime;
        args.EndDate = Appointment.PickupDate.LocalDateTime;
        args.Summary = Appointment.Vehicle.Description;
        args.Description = string.Join(" ", Appointment.Requests.Select(x => x.Description));
        args.Reference = Appointment.VehicleRef.ToString();

        await InterOpService.DownloadICS(args);
    }
}
