@page "/WaitingForApproval"
@page "/WaitingForApproval/{SerialNumber}/{WorkItemRef}"
@page "/WaitingForApproval/{SerialNumber}/{WorkItemRef}/{Requestor}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudContainer>
            <MudStack>
                <MudStack Row="true" Style="justify-content:center;">
                    <MudStack AlignItems="AlignItems.Center" Class="pl-20">
                        <MudText Typo="Typo.h6">@Resources.SO # @ServiceOrder.SONumber</MudText>
                        <MudButton Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Outlined.Checklist"
                                   OnClick="ViewInspection">
                            Inspection
                        </MudButton>
                    </MudStack>
                    <MudSpacer />
                    <MudStack AlignItems="AlignItems.Center" Class="pr-20">
                        <MudText Typo="Typo.h6">@ServiceOrder.Vehicle.Description</MudText>
                        <MudText Typo="Typo.h6">@ServiceOrder.Vehicle.VIN</MudText>
                    </MudStack>
                </MudStack>

                <MudStack AlignItems="AlignItems.Center">
                    <MudDivider Style="width:90%" />
                    <MudText Typo="Typo.h6">
                        @ServiceOrder.AdditionalComments
                    </MudText>
                </MudStack>

                <MudStack AlignItems="AlignItems.Center" Class="mt-4">
                    <MudText Typo="Typo.h5">Approved Services</MudText>
                    <MudDivider Class="mt-1" Style="width:30%" />
                    @foreach (var approved in ServiceOrder.ApprovedRequests)
                    {
                        <MudText>@approved.Description</MudText>
                    }
                </MudStack>

                <MudStack AlignItems="AlignItems.Center" Class="mt-4">
                    <MudText Typo="Typo.h5">Service Recommendations</MudText>
                    <MudDivider Class="mt-1 mb-1" Style="width:40%" />
                    @foreach (var pending in ServiceOrder.PendingRequests)
                    {
                        <MudGrid>
                            <MudItem xs="1" />
                            <MudItem xs="9">
                                <MudText Style="@pending.Priority.LabelStyle()" Class="pl-2 pr-2 mb-2">
                                    @pending.Priority.FriendlyText()
                                </MudText>
                                <MudText>@pending.Description</MudText>
                            </MudItem>
                            <MudItem xs="2">
                                <MudText>@((pending.EstimatedLabour + pending.EstimatedParts).ToString("C2"))</MudText>
                            </MudItem>

                            <MudItem xs="12">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                    <MudButton Style="width:fit-content; margin-right:10%"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.Check"
                                               Variant="@(pending.MarkedForApproval ? Variant.Filled: Variant.Outlined)"
                                               OnClick="() => SetApproval(pending, true)">
                                        Approve
                                    </MudButton>
                                    <MudButton Style="width:fit-content;"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Close"
                                               Variant="@(pending.MarkedForApproval ? Variant.Outlined : Variant.Filled)"
                                               OnClick="() => SetApproval(pending, false)">
                                        Decline
                                    </MudButton>
                                </MudStack>
                            </MudItem>

                            <MudItem xs="3" />
                            <MudItem xs="7">
                                <MudDivider Style="width:100%" />
                            </MudItem>
                        </MudGrid>
                    }
                </MudStack>
            </MudStack>
        </MudContainer>

        <MudPaper Elevation="0" class="page-footer-pinned">
            <MudGrid>
                <MudItem xs="3" />

                <MudItem xs="6">
                    <MudStack Style="align-items: center;">
                        <MudStack Row="true" Spacing="3">
                            <MudText Typo="Typo.h6">Subtotal: @ServiceOrder.SubTotal.ToString("C2")</MudText>
                            <MudText Typo="Typo.h6">Taxes: @ServiceOrder.TaxTotal.ToString("C2")</MudText>
                            <MudText Typo="Typo.h6">Fees: @ServiceOrder.FeesTotal.ToString("C2")</MudText>
                        </MudStack>
                        <MudText Typo="Typo.h5">Total: @ServiceOrder.GrandTotal.ToString("C2")</MudText>
                    </MudStack>
                </MudItem>

                <MudItem xs="3" Style="display: flex; justify-content: flex-start">
                    <MudButton Variant="Variant.Filled" Color="Color.Dark" Style="height:60%; align-self:center">
                        Confirm
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;
    [Parameter]
    public string Requestor { get; set; } = string.Empty;

    private ServiceOrder ServiceOrder { get; set; } = new();

    private async Task Initialize()
    {
        //Debug Code
        ServiceOrder = ServiceOrder.GenerateDummy();
        SerialNumber = "9999.QA";
        return;

        SharedStateService.SharedState.SerialNumber = SerialNumber;

        var busyDialog = DialogService.Show<MudBusyDialog>("");
        var args = new ServiceOrderFetchArgs() { SerialNumber = SerialNumber, ServiceOrderRef = ServiceOrder.Id };
        var resp = await httpClient.PostAsJsonAsync<ServiceOrderFetchArgs>("/api/ServiceOrder/FetchServiceOrder", args) ?? new();

        busyDialog.Close();

        if (!resp.IsSuccessStatusCode)
        {
            SharedStateService.SetInvalidServiceOrderError();
            return;
        }

        ServiceOrder = await resp.Content.ReadFromJsonAsync<ServiceOrder>() ?? new();

        if (!ServiceOrder.IsValid())
        {
            SharedStateService.SetInvalidServiceOrderError();
            return;
        }

        SharedStateService.SetBanner(ServiceOrder.ShopBanner);
    }

    private bool ValidateParams()
    {
        return true; //Debug code

        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateServiceOrderRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        ServiceOrder.Id = parsedWorkItemRef;

        return true;
    }

    private async Task ViewInspection()
    {
        var busyDialog = DialogService.Show<MudBusyDialog>("");

        var inspectionDoc = await httpClient.GetByteArrayAsync("samplepdf.pdf");

        SharedStateService.AddModel(SharedModelTypes.InspectionDocument, Convert.ToBase64String(inspectionDoc));
        await SharedStateService.SaveToSession();

        busyDialog.Close();

        NavigationManager.NavigateTo($"/Document/{SharedModelTypes.InspectionDocument.ToString()}");
    }

    private void SetApproval(RequestLine req, bool approved) => req.MarkedForApproval = approved;
}
