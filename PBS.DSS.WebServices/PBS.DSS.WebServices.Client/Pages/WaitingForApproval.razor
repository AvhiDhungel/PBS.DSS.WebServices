@page "/WaitingForApproval"
@page "/WaitingForApproval/{SerialNumber}/{WorkItemRef}"
@page "/WaitingForApproval/{SerialNumber}/{WorkItemRef}/{Requestor}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudStack AlignItems="AlignItems.Stretch" Class="mb-10">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@Resources.ServiceOrder</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@Resources.ServiceOrder</MudText>
                        <MudText Class="card-detail-text">@ServiceOrder.SONumber</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@Resources.ServiceAdvisor</MudText>
                        <MudText Class="card-detail-text">@ServiceOrder.AdvisorName</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@Resources.Inspection</MudText>
                        <MudButton Variant="Variant.Outlined"
                                   Class="monochrome-button pl-5 pr-5 pt-1 pb-1"
                                   StartIcon="@Icons.Material.Outlined.Checklist"
                                   Style="width:fit-content; height:fit-content;"
                                   OnClick="ViewInspection">
                            View
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@Resources.VehicleDetails</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack>
                        <MudText Class="card-detail-text">@ServiceOrder.Vehicle.Description</MudText>
                        <MudText Class="card-detail-text">@ServiceOrder.Vehicle.VIN</MudText>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            @if (ServiceOrder.AdditionalComments.HasValue())
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">@Resources.AdditionalComments</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Class="card-detail-text">@ServiceOrder.AdditionalComments</MudText>
                    </MudCardContent>
                </MudCard>
            }
            @if (ServiceOrder.PendingRequests.Count() > 0)
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">@Resources.ServiceRecommendations</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack>
                            @foreach (var pending in ServiceOrder.PendingRequests)
                            {
                                <MudStack Spacing="1" AlignItems="AlignItems.Center">
                                    <MudText Style="@pending.Priority.LabelStyle()" Class="pl-2 pr-2 mb-2">
                                        @pending.Priority.FriendlyText()
                                    </MudText>

                                    <MudGrid Spacing="0">
                                        <MudItem xs="9">
                                            <MudText Class="card-detail-text">@pending.Description</MudText>
                                        </MudItem>
                                        <MudItem xs="3">
                                            <MudText Class="card-detail-text" Align="Align.End">@((pending.EstimatedLabour + pending.EstimatedParts).ToString("C2"))</MudText>
                                        </MudItem>
                                    </MudGrid>

                                    <MudStack AlignItems="AlignItems.Start"
                                              Justify="Justify.Center"
                                              Class="mb-5"
                                              Row="true">
                                        <MudButton Color="Color.Success"
                                                   StartIcon="@Icons.Material.Filled.Check"
                                                   Size="Size.Small"
                                                   Variant="@(pending.MarkedForApproval.HasValue && pending.MarkedForApproval.Value ? Variant.Filled: Variant.Outlined)"
                                                   OnClick="() => SetApproval(pending, true)">
                                            @Resources.Approve
                                        </MudButton>
                                        <MudButton Color="Color.Error"
                                                   StartIcon="@Icons.Material.Filled.Close"
                                                   Size="Size.Small"
                                                   Variant="@(!pending.MarkedForApproval.HasValue || pending.MarkedForApproval.Value ? Variant.Outlined : Variant.Filled)"
                                                   OnClick="() => SetApproval(pending, false)">
                                            @Resources.Decline
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            }
            <MudCard>
                <MudCardHeader>
                    <MudStack Row="true" Style="width:100%">
                        <MudText Typo="Typo.h5">@Resources.ApprovedServices</MudText>
                        <MudSpacer />
                        <MudToggleIconButton Class="monochrome-toggle-button"
                                             Variant="Variant.Text"
                                             ToggledIcon="@Icons.Material.Filled.KeyboardArrowUp"
                                             Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                             Size="Size.Large"
                                             ToggledSize="Size.Large"
                                             Toggled="IsApprovedServicesExpanded"
                                             ToggledChanged="ToggleApprovedServices" />
                    </MudStack>
                </MudCardHeader>
                <MudCollapse Expanded="@IsApprovedServicesExpanded">
                    <MudCardContent>
                        <MudStack>
                            @foreach (var req in ServiceOrder.ApprovedRequests)
                            {
                                <MudText Class="card-detail-text">@req.Description</MudText>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCollapse>
            </MudCard>
        </MudStack>

        <MudPaper Elevation="0" class="page-footer-pinned">
            <MudGrid Justify="Justify.FlexEnd" Style="align-items:center;" Spacing="2">
                <MudItem xs="12" lg="8">
                    <MudStack AlignItems="AlignItems.Center" Spacing="0">
                        <MudStack Row="true" Spacing="3">
                            <MudText Typo="Typo.h6">@Resources.Subtotal: @SubTotal.ToString("C2")</MudText>
                            <MudText Typo="Typo.h6">@Resources.Taxes: @Taxes.ToString("C2")</MudText>
                            <MudText Typo="Typo.h6">@Resources.Fees: @Fees.ToString("C2")</MudText>
                        </MudStack>
                        <MudText Typo="Typo.h6">@Resources.Total: @GrandTotal.ToString("C2")</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="8" md="2" lg="2">
                    <MudButton Variant="Variant.Outlined"
                               Class="monochrome-button"
                               Style="padding-left:8%; padding-right:8%; width:fit-content;"
                               StartIcon="@Icons.Material.Outlined.CheckCircle"
                               OnClick="Confirm">
                        @Resources.Confirm
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;
    [Parameter]
    public string Requestor { get; set; } = string.Empty;

    private ServiceOrder ServiceOrder { get; set; } = new();

    private bool IsApprovedServicesExpanded { get; set; } = true;
    private double SubTotal { get; set; } = 0;
    private double Taxes { get; set; } = 0;
    private double Fees { get; set; } = 0;
    private double GrandTotal => SubTotal + Taxes + Fees;


    private async Task Initialize()
    {
        //Debug Code
        ServiceOrder = ServiceOrder.GenerateDummy();
        SerialNumber = "1156.QA";
        CalculateTotals();
        return;

        SharedStateService.SharedState.SerialNumber = SerialNumber;

        var busyDialog = DialogService.Show<MudBusyDialog>("");
        var args = new ServiceOrderFetchArgs() { SerialNumber = SerialNumber, ServiceOrderRef = ServiceOrder.Id };

        var resp = await ControllerAPIService.FetchServiceOrder(args);

        busyDialog.Close();

        if (resp.HasError)
        {
            SharedStateService.SetInvalidServiceOrderError();
            return;
        }

        ServiceOrder = resp.ResponseObject ?? ServiceOrder;
        SharedStateService.SetBanner(ServiceOrder.ShopBanner);
        CalculateTotals();
    }

    private bool ValidateParams()
    {
        return true; //Debug code

        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateServiceOrderRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        ServiceOrder.Id = parsedWorkItemRef;

        return true;
    }

    private void ToggleApprovedServices() => IsApprovedServicesExpanded = !IsApprovedServicesExpanded;

    private async Task ViewInspection()
    {
        var busyDialog = DialogService.Show<MudBusyDialog>("");

        var inspectionDoc = await httpClient.GetByteArrayAsync("samplepdf.pdf");

        SharedStateService.AddModel(SharedModelTypes.InspectionDocument, Convert.ToBase64String(inspectionDoc));
        // await SharedStateService.SaveToSession();

        busyDialog.Close();

        NavigationManager.NavigateTo($"/Document/{SharedModelTypes.InspectionDocument.ToString()}");
        // await InterOpService.OpenLinkInNewTab($"/Document/{SharedModelTypes.InspectionDocument.ToString()}");
    }

    private void CalculateTotals()
    {
        SubTotal = ServiceOrder.SubTotal + ServiceOrder.RequestsMarkedForApproval.Sum((x) => x.EstimatedLabour + x.EstimatedParts);
        Taxes = ServiceOrder.TaxTotal;
        Fees = ServiceOrder.FeesTotal;
    }

    private void SetApproval(RequestLine req, bool approved)
    {
        req.MarkedForApproval = approved;
        CalculateTotals();
    }

    private void Confirm()
    {
        if (ServiceOrder.PendingRequests.Any(x => !x.MarkedForApproval.HasValue))
        {
            SnackbarService.Add("Please Approve or Decline all Recommended Services Prior to Confirming", Severity.Error);
        }
    }
}
