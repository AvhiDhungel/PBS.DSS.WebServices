@page "/ServiceOrderStatus"
@page "/ServiceOrderStatus/{SerialNumber}/{WorkItemRef}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudStack AlignItems="AlignItems.Center" Class="mb-20">
            <MudGrid Justify="Justify.Center">
                <MudItem lg="5" md="6" xs="12">
                    <MudPaper Elevation="4" Class="paper-card-fit">
                        <MudStack AlignItems="AlignItems.Stretch" Spacing="1">
                            <MudText Typo="Typo.h6" Align="Align.Center">@Resources.ServiceOrder</MudText>
                            <MudDivider />
                            <MudSpacer />
                            <MudStack Row="true">
                                <MudText>@Resources.SO #:</MudText>
                                <MudSpacer />
                                <MudText>@ServiceOrder.SONumber</MudText>
                            </MudStack>
                            <MudStack Row="true">
                                <MudText>@Resources.ServiceAdvisor:</MudText>
                                <MudSpacer />
                                <MudText>@ServiceOrder.AdvisorName</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem lg="5" md="6" xs="12">
                    <MudPaper Elevation="4" Class="paper-card-fit">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6">@Resources.VehicleDetails</MudText>
                            <MudDivider />
                            <MudSpacer />
                            <MudText>@ServiceOrder.Vehicle.Description</MudText>
                            <MudText>@ServiceOrder.Vehicle.VIN</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.Center" Class="mb-4">
                <MudItem lg="10" md="12" xs="12">
                    <MudPaper Elevation="4" Class="paper-card-flex">
                        <MudTimeline Class="responsive-timeline" TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Top">
                            @foreach (ServiceOrderTimeline e in Enum.GetValues(typeof(ServiceOrderTimeline)))
                            {
                                <MudTimelineItem Size="Size.Medium"
                                                 Color="Color.Success"
                                                 Variant="Variant.Filled"
                                                 HideDot="@(ServiceOrder.Timeline != e)">
                                    <ItemDot>
                                        <MudIcon Icon="@Icons.Material.Outlined.Check" />
                                    </ItemDot>
                                    <ItemContent>
                                        <MudText Align="Align.Center" Typo="Typo.body2">@(e.ToLocalizedString())</MudText>
                                    </ItemContent>
                                </MudTimelineItem>
                            }
                        </MudTimeline>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true" Wrap="Wrap.Wrap">
                @if (!ServiceOrder.IsOpen)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="ViewInspection">
                        @Resources.Inspection
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="ViewCustomerCopy">
                        @Resources.CustomerCopy
                    </MudButton>
                }
                else if (ServiceOrder.PendingRequests.Count() > 0)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Outlined.Recommend"
                               OnClick="ViewRecommendations">
                        @Resources.ViewYourRecommendations
                    </MudButton>
                }
            </MudStack>

            <MudGrid Justify="Justify.Center" Class="mb-4">
                <MudItem lg="10" md="12" xs="12">
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="mt-4">@Resources.ApprovedServices</MudText>
                    <MudDivider />
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.Center">
                @foreach (var approved in ServiceOrder.ApprovedRequests)
                {
                    <MudItem lg="@((approved == ServiceOrder.ApprovedRequests.Last()) ? 10: 5)"
                             md="@((approved == ServiceOrder.ApprovedRequests.Last()) ? 10: 5)"
                             xs="12">
                        <MudPaper Elevation="4" Class="paper-card-wrap">
                            <MudStack Spacing="1">
                                <MudText>@approved.Description</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;

    private ServiceOrder ServiceOrder { get; set; } = new();

    private async Task Initialize()
    {
        //Debug Code
        ServiceOrder = ServiceOrder.GenerateDummy();
        SerialNumber = "9999.QA";
        return;

        var busyDialog = DialogService.Show<MudBusyDialog>("");
        var args = new ServiceOrderFetchArgs() { SerialNumber = SerialNumber, ServiceOrderRef = ServiceOrder.Id };

        var resp = await ControllerAPIService.FetchServiceOrder(args);

        busyDialog.Close();

        if (resp.HasError)
        {
            SharedStateService.SetInvalidServiceOrderError();
            return;
        }

        ServiceOrder = resp.ResponseObject ?? ServiceOrder;
        SharedStateService.SetBanner(ServiceOrder.ShopBanner);
    }

    private bool ValidateParams()
    {
        return true; //Debug code

        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateServiceOrderRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        ServiceOrder.Id = parsedWorkItemRef;

        return true;
    }

    private void ViewRecommendations()
    {
        NavigationManager.NavigateTo($"/WaitingForApproval/{SerialNumber}/{ServiceOrder.Id}");
    }

    private async Task ViewInspection()
    {
        var busyDialog = DialogService.Show<MudBusyDialog>("");

        var inspectionDoc = await httpClient.GetByteArrayAsync("samplepdf.pdf");

        SharedStateService.AddModel(SharedModelTypes.InspectionDocument, Convert.ToBase64String(inspectionDoc));
        // await SharedStateService.SaveToSession();

        busyDialog.Close();

        NavigationManager.NavigateTo($"/Document/{SharedModelTypes.InspectionDocument.ToString()}");
        // await InterOpService.OpenLinkInNewTab($"/Document/{SharedModelTypes.InspectionDocument.ToString()}");
    }

    private async Task ViewCustomerCopy()
    {
        var busyDialog = DialogService.Show<MudBusyDialog>("");

        var inspectionDoc = await httpClient.GetByteArrayAsync("samplepdf.pdf");

        SharedStateService.AddModel(SharedModelTypes.CustomerCopy, Convert.ToBase64String(inspectionDoc));
        // await SharedStateService.SaveToSession();

        busyDialog.Close();

        NavigationManager.NavigateTo($"/Document/{SharedModelTypes.CustomerCopy.ToString()}");
        // await InterOpService.OpenLinkInNewTab($"/Document/{SharedModelTypes.CustomerCopy.ToString()}");
    }
}
