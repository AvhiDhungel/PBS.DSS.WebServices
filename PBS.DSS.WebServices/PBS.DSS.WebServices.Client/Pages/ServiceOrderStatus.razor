@page "/ServiceOrderStatus"
@page "/ServiceOrderStatus/{SerialNumber}/{WorkItemRef}"

<MudSessionErrorWrapper Validate="ValidateParams" FetchAsync="Initialize">
    <Content>
        <MudStack AlignItems="AlignItems.Stretch" Class="mb-20">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@Resources.ServiceOrder</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@Resources.ServiceOrder</MudText>
                        <MudText Class="card-detail-text">@ServiceOrder.SONumber</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@Resources.ServiceAdvisor</MudText>
                        <MudText Class="card-detail-text">@ServiceOrder.AdvisorName</MudText>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@Resources.VehicleDetails</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack>
                        <MudText Class="card-detail-text">@ServiceOrder.Vehicle.Description</MudText>
                        <MudText Class="card-detail-text">@ServiceOrder.Vehicle.VIN</MudText>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudTimeline Class="pb-5"
                             TimelineOrientation="TimelineOrientation.Horizontal"
                             TimelinePosition="@(IsMobile ? TimelinePosition.Alternate : TimelinePosition.Top)">
                    @foreach (ServiceOrderTimeline e in Enum.GetValues(typeof(ServiceOrderTimeline)))
                    {
                        <MudTimelineItem Size="Size.Medium"
                                         Color="Color.Success"
                                         Variant="Variant.Filled"
                                         HideDot="@(ServiceOrder.Timeline != e)">
                            <ItemDot>
                                <MudIcon Icon="@Icons.Material.Outlined.Check" />
                            </ItemDot>
                            <ItemContent>
                                <MudText Align="Align.Center" Typo="Typo.body2">@(e.ToLocalizedString())</MudText>
                            </ItemContent>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudCard>
            <MudCard>
                <MudCardHeader>
                    <MudStack Row="true" Style="width:100%">
                        <MudText Typo="Typo.h5">@Resources.Services</MudText>
                        <MudSpacer />
                        <MudToggleIconButton Class="monochrome-toggle-button"
                                             Variant="Variant.Text"
                                             ToggledIcon="@Icons.Material.Filled.KeyboardArrowUp"
                                             Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                             Size="Size.Large"
                                             ToggledSize="Size.Large"
                                             Toggled="IsServicesExpanded"
                                             ToggledChanged="ToggleServices" />
                    </MudStack>
                </MudCardHeader>
                <MudCollapse Expanded="@IsServicesExpanded">
                    <MudCardContent>
                        <MudStack>
                            @foreach (var req in ServiceOrder.ApprovedRequests)
                            {
                                <MudText Class="card-detail-text">@req.Description</MudText>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCollapse>
            </MudCard>
            <MudGrid Justify="Justify.Center">
                @if (!ServiceOrder.IsOpen)
                {
                    <MudItem lg="3" md="3" xs="6">
                        <MudButton Variant="Variant.Outlined"
                                   OnClick="ViewInspection">
                            @Resources.Inspection
                        </MudButton>
                    </MudItem>
                    <MudItem lg="3" md="3" xs="6">
                        <MudButton Variant="Variant.Outlined"
                                   OnClick="ViewCustomerCopy">
                            @Resources.CustomerCopy
                        </MudButton>
                    </MudItem>
                }
                else if (ServiceOrder.PendingRequests.Count() > 0)
                {
                    <MudItem lg="6" md="6" xs="12">
                        <MudButton Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Outlined.Recommend"
                                   OnClick="ViewRecommendations">
                            @Resources.ViewYourRecommendations
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    </Content>
</MudSessionErrorWrapper>

@code {
    [Parameter]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter]
    public string WorkItemRef { get; set; } = string.Empty;

    private ServiceOrder ServiceOrder { get; set; } = new();

    private bool IsServicesExpanded { get; set; } = true;
    private bool IsMobile { get; set; } = true;

    private async Task Initialize()
    {
        IsMobile = await InterOpService.IsMobile();

        //Debug Code
        ServiceOrder = ServiceOrder.GenerateDummy();
        SerialNumber = "9999.QA";
        return;

        var busyDialog = await DialogService.ShowBusyDialog();
        var args = new ServiceOrderFetchArgs() { SerialNumber = SerialNumber, ServiceOrderRef = ServiceOrder.Id };

        var resp = await ControllerAPIService.FetchServiceOrder(args);

        busyDialog.Close();

        if (resp.HasError)
        {
            SharedStateService.SetInvalidServiceOrderError();
            return;
        }

        ServiceOrder = resp.ResponseObject ?? ServiceOrder;
        SharedStateService.SetBanner(ServiceOrder.ShopBanner);
    }

    private bool ValidateParams()
    {
        return true; //Debug code

        if (!SharedStateService.ValidateSerialNumber(SerialNumber)) return false;
        if (!SharedStateService.ValidateServiceOrderRef(WorkItemRef, out Guid parsedWorkItemRef)) return false;

        ServiceOrder.Id = parsedWorkItemRef;

        return true;
    }

    private void ToggleServices() => IsServicesExpanded = !IsServicesExpanded;

    private void ViewRecommendations()
    {
        NavigationManager.NavigateTo($"/WaitingForApproval/{SerialNumber}/{ServiceOrder.Id}");
    }

    private async Task ViewInspection()
    {
        if (!SharedStateService.HasModel())
            await DialogService.PerformBusy(SharedStateService.SaveModelToSession(ServiceOrder));

        await InterOpService.OpenLinkInNewTab($"/Document/{DocumentTypes.Inspection.ToString()}");
    }

    private async Task ViewCustomerCopy()
    {
        if (!SharedStateService.HasModel())
            await DialogService.PerformBusy(SharedStateService.SaveModelToSession(ServiceOrder));

        await InterOpService.OpenLinkInNewTab($"/Document/{DocumentTypes.CustomerCopy.ToString()}");
    }
}
